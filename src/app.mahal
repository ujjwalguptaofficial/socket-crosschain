---
name: app.mahal
description: This component is the main parent component which is used to initiate the app.
dateCreated:
---

<html>
<div class="container is-flex is-flex-direction-column is-align-items-center">
	<div :if(isConnected) class="mt-6">
		WalletAddress : {{walletAddress}}
		
		<div class="mt-2 is-primary">
			<button class="button" @click="transfer" :class="{'is-loading':isTransfering}">Transfer cross chain</button>
		</div>
	</div>
	<ConnectToWallet :else @connect="onConnectToWallet" />
</div>
</html>

<script>
import { Component, children, reactive } from "mahal";
import MahalIntro from "@/components/mahal_intro.mahal";
import ConnectToWallet from "@/components/connect_to_wallet.mahal";
import { providers, BigNumber, constants, utils } from "ethers";
import { ChainId, Socket, Path } from "@socket.tech/socket-v2-sdk";
import { SocketApiService } from "@/services";

@children({
    MahalIntro,
    ConnectToWallet,
})
export default class extends Component {
    @reactive isConnected;

    web3Provider: providers.Web3Provider;

    @reactive walletAddress: string;
    @reactive isTransfering = false;

    service = new SocketApiService();

    async onConnectToWallet(provider) {
        this.isConnected = true;
        const web3Provider = new providers.Web3Provider(provider);
        this.web3Provider = web3Provider;
        this.walletAddress = await this.web3Provider.getSigner().getAddress();
    }

    chains = [];

    async getChains() {
        if (!this.chains.length) {
            const response = await this.service.getChains();
            this.chains = response.result;
        }
        return this.chains;
    }

    async switchToChainId(network) {
        const { chainId, name, rpcs, explorers, currency } = network;
        const walletProvider = this.web3Provider.provider as any;
        const chainIdInhex = utils.hexValue(utils.hexlify(chainId));
        await walletProvider.request({
            id: 1,
            jsonrpc: "2.0",
            method: "wallet_addEthereumChain",
            params: [
                {
                    chainId: chainIdInhex, //"0x5",
                    rpcUrls: rpcs,
                    chainName: name,
                    blockExplorerUrls: explorers,
                    nativeCurrency: currency,
                },
            ],
        });
    }

    async transfer() {
        this.isTransfering = true;

        // this is our chainid
        const fromChainId = 137;
        const toChainId = 1;

        // check if chainids are supported by socket

        const chainAvailables: any[] = await this.getChains();
        const chainIdNeeded = [fromChainId, toChainId];
        let isNotSupported = false;
        chainIdNeeded.forEach((chain) => {
            if (!chainAvailables.find((q) => q.chainId == chain)) {
                isNotSupported = true;
            }
        });

        const responseForFromTokens = await this.service
            .getFromTokensList(fromChainId, toChainId)
            .then((response) => response.result);

        const responseForToTokens = await this.service
            .getToTokensList(fromChainId, toChainId)
            .then((response) => response.result);

        const tokenFrom = responseForFromTokens.find((token) => {
            return token.symbol === "MATIC";
        });
        const tokenTo = responseForToTokens.find((token) => {
            return token.symbol === "MATIC";
        });

        const quotes = await this.service
            .getQuotes({
                from: this.walletAddress,
                to: this.walletAddress,
                fromAmount: 100,
                fromChainId: fromChainId,
                toChainId: toChainId,
                fromTokenAddress: tokenFrom.address,
                toTokenAddress: tokenTo.address,
            })
            .then((response) => {
                return response.result;
            });
        if (quotes.routes.length === 0) {
            return alert("No quote found");
        }

        // route choosen - for simplicity let's choose first route
        const routeChoosen = quotes.routes[0];
        let routeStartResponse = await this.service.startRoute(
            routeChoosen,
            fromChainId,
            toChainId,
            tokenFrom.address,
            tokenTo.address
        );
        if (routeStartResponse.success) {
            // execute first transaction
            const routeResult = routeStartResponse.result;
            this.handleTxExecution(routeResult);
        }

        return;

        this.isTransfering = false;
    }

    async handleTxExecution(payload) {
        const signer = this.web3Provider.getSigner();
        const targetChainId = payload.chainId;
        const currentTxIndex = payload.userTxIndex;
        let userTxCount = payload.totalUserTx;
        let activeRouteId = payload.activeRouteId;

        const chainAvailables: any[] = await this.getChains();

        // switch to targetChainId if not
        const currentChainId = await signer.getChainId();
        if (targetChainId !== currentChainId) {
            // alert(
            //     `expected chainId ${targetChainId} but found ${currentChainId}`
            // );
            // return;

            const targetChain = chainAvailables.find(
                (q) => q.chainId == targetChainId
            );
            debugger;
            await this.switchToChainId(targetChain);
        }

        const { approvalData, txTarget } = payload;
        // approve tx if approval data

        if (approvalData) {
            // check if approval needed
            let {
                owner,
                allowanceTarget,
                approvalTokenAddress,
                minimumApprovalAmount,
            } = approvalData;
            if (!allowanceTarget) {
                allowanceTarget = txTarget;
            }
            const allowanceResponse = await this.service.getAllowance(
                targetChainId,
                owner,
                allowanceTarget,
                approvalTokenAddress
            );

            const allowance = allowanceResponse.result;

            const allowanceValue = BigNumber.from(allowance.value);
            const minimumApprovalAmountBN = BigNumber.from(
                minimumApprovalAmount
            );
            // allownace is less than minimum required
            if (allowanceValue.lt(minimumApprovalAmountBN)) {
                // allow max value

                const approvalTxDataResponse =
                    await this.service.getApprovalCallData(
                        targetChainId,
                        owner,
                        allowanceTarget,
                        approvalTokenAddress,
                        constants.MaxUint256
                    );
                const payload = approvalTxDataResponse.result;
                debugger;
                const approvalTx = await signer.sendTransaction({
                    data: payload.data,
                    to: approvalTokenAddress,
                });
                approvalTx.wait();
            }
        }

        // eth_sendTransaction
        const tx = await signer.sendTransaction({
            data: payload.txData,
            to: txTarget,
        });
        const txHash = tx.hash;

        localStorage.setItem("current_tx_index", currentTxIndex);
        localStorage.setItem("user_tx_count", userTxCount);
        localStorage.setItem("active_route_id", activeRouteId);
        localStorage.setItem("tx_hash", txHash);
        this.executeAndCheck();
    }

    async executeAndCheck() {
        const currentTxIndex = localStorage.getItem("current_tx_index");
        const userTxCount = localStorage.getItem("user_tx_count");
        const activeRouteId = localStorage.getItem("active_route_id");
        const txHash = localStorage.getItem("tx_hash");

        if (currentTxIndex >= userTxCount) {
            // tx finished
            return;
        }

        // wait for 1 second and then check for status
        await new Promise((res) => {
            setTimeout(res, 1000);
        });
        try {
            // check for tx status
            debugger;
            const response = await this.service.checkTxStatus(
                activeRouteId,
                currentTxIndex,
                txHash
            );
            debugger;
            switch (response.result.toLowerCase()) {
                case "failed":
                    alert("transaction failed");
                    break;
                case "ready":
                    //fetch tx data from build apiKey
                    const response = await this.service.buildNextTx(
                        activeRouteId
                    );
                    this.handleTxExecution(response.result);
                    return;
                case "pending":
                case "completed":
                default:
                    this.executeAndCheck();
            }
        } catch (ex) {
            console.log(ex);
            this.executeAndCheck();
        }
    }

    async onInit() {
        window["app"] = this;
    }
}
</script>

<style>
</style>
